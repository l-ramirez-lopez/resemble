% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/funlib.R
\name{ith_subsets_list}
\alias{ith_subsets_list}
\title{Chunked Iterator for Subsetting by Nearest Neighbors}
\usage{
ith_subsets_list(x, y, kindx, D = NULL, chunk_size = 1)
}
\arguments{
\item{x}{A numeric matrix of predictors (n × p), where \code{n} is the number of
observations and \code{p} the number of features.}

\item{y}{A numeric vector or matrix of responses of length \code{n} or
dimension \verb{n × 1}.}

\item{kindx}{An integer matrix of size \verb{k × n}, where each column contains
the indices of the \code{k} nearest neighbors for the corresponding observation.}

\item{D}{Optional numeric matrix of pairwise dissimilarities (n × n).
If provided, for each subset the dissimilarities among the selected
neighbors are prepended as additional columns to the predictors.}

\item{chunk_size}{Integer. Maximum number of observations per batch.
The \code{n} observations are split into consecutive batches of size
\code{chunk_size}, except for the final batch which may be smaller.}
}
\value{
An iterator object compatible with \code{nextElem()} from the
\strong{iterators} package. Each call to \code{nextElem()} returns a list of
sublists (one per observation in the batch), where each sublist contains:
\itemize{
\item \code{x}: predictor matrix for that local subset (with optional dissimilarity)
\item \code{y}: response vector/matrix for that local subset
}
}
\description{
Creates an iterator that returns batched subsets of observations for
local modeling. Each batch corresponds to a set of consecutive indices
(rows) of size up to \code{chunk_size}. For each observation in the batch,
its corresponding nearest neighbors are used to extract the \code{x}, \code{y},
and optional \code{D} values.
}
\examples{
\dontrun{
library(iterators)
it <- ith_subsets_list(Xr, Yr, kindx, D, chunk_size = 100)

while (TRUE) {
  chunk <- tryCatch(nextElem(it), error = function(e) {
    if (inherits(e, "StopIteration")) return(NULL)
    stop(e)
  })
  if (is.null(chunk)) break
  print(length(chunk))  # Number of subsets in the batch
}
}

}
\keyword{internal}
